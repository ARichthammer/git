{"cells": [{"metadata": {"collapsed": true, "id": "48d963ef-36df-4f8e-8929-f3f9bc464816"}, "cell_type": "markdown", "source": "***\n# <font color=Blue>  Churn Analysis </font>\n\n### <font color=grey> IBM EVU Customer Churn Dataset </font>\n\n***"}, {"metadata": {"id": "63debbdb-d475-4c34-a7cd-93f98446a7f5"}, "cell_type": "markdown", "source": "## <font color=grey> Import Libraries </font>"}, {"metadata": {"id": "7af6b790-fbde-4e29-b63f-df1a4790f73c"}, "cell_type": "code", "source": "import pandas as pd\nfrom pandas.api.types import CategoricalDtype\nimport numpy as np\nfrom numpy import std\nfrom sklearn import preprocessing\nfrom sklearn import metrics\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.metrics import roc_auc_score, average_precision_score, confusion_matrix\nimport matplotlib.pyplot as plt\nfrom matplotlib import style\nstyle.use('ggplot')\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings(\"ignore\")", "execution_count": 26, "outputs": []}, {"metadata": {"id": "6279bbe1-14e0-40b7-9d64-06ff88b50c3d"}, "cell_type": "markdown", "source": "## <font color=grey> Load Data </font>"}, {"metadata": {"id": "5d1d07746dba432282513c35ebd7c326"}, "cell_type": "code", "source": "from ibm_watson_studio_lib import access_project_or_space\nwslib = access_project_or_space()\n\nimport pandas as pd\n\ndf = pd.read_csv(wslib.mount.get_data_path('EVU_Stammdaten.csv'))\ndf.head()", "execution_count": 27, "outputs": [{"output_type": "execute_result", "execution_count": 27, "data": {"text/plain": "   ID Geburtsdatum  Alter Geschlecht Familienstand HatKinder  Zahlmethode  \\\n0   1   29. Jan 72     47          M        single        ja       Paypal   \n1   2   21. Jul 49     70          F           NaN        ja  Kreditkarte   \n2   3   10. Apr 85     34          F        single      nein  Kreditkarte   \n3   4   04. Feb 75     44          M        single        ja  Kreditkarte   \n4   5   17. Aug 78     47          M           NaN      nein  Kreditkarte   \n\n   DAUER_Kundenbeziehung           Region              Bundesland Gebiet  \\\n0                    8.0  Sueddeutschland              Thueringen   Land   \n1                    8.0  Norddeutschland             Brandenburg  Stadt   \n2                    3.0  Norddeutschland  Mecklenburg-Vorpommern  Stadt   \n3                    NaN  Norddeutschland                 Hamburg   Land   \n4                    3.0  Sueddeutschland              Thueringen   Land   \n\n   Umsatz_Total  Umsatz_letztes_Quartal  Oekostrom  Fernwaermeabnehmer  \\\n0      8746.710                280.3860          1                   1   \n1      8411.260                 31.5400          0                   0   \n2      1230.960                405.8920          0                   0   \n3       396.854                529.9040          0                   0   \n4      8575.380                177.2998          1                   0   \n\n       Churn  \n0  Kuendiger  \n1      Kunde  \n2  Kuendiger  \n3  Kuendiger  \n4      Kunde  ", "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ID</th>\n      <th>Geburtsdatum</th>\n      <th>Alter</th>\n      <th>Geschlecht</th>\n      <th>Familienstand</th>\n      <th>HatKinder</th>\n      <th>Zahlmethode</th>\n      <th>DAUER_Kundenbeziehung</th>\n      <th>Region</th>\n      <th>Bundesland</th>\n      <th>Gebiet</th>\n      <th>Umsatz_Total</th>\n      <th>Umsatz_letztes_Quartal</th>\n      <th>Oekostrom</th>\n      <th>Fernwaermeabnehmer</th>\n      <th>Churn</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>29. Jan 72</td>\n      <td>47</td>\n      <td>M</td>\n      <td>single</td>\n      <td>ja</td>\n      <td>Paypal</td>\n      <td>8.0</td>\n      <td>Sueddeutschland</td>\n      <td>Thueringen</td>\n      <td>Land</td>\n      <td>8746.710</td>\n      <td>280.3860</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Kuendiger</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>21. Jul 49</td>\n      <td>70</td>\n      <td>F</td>\n      <td>NaN</td>\n      <td>ja</td>\n      <td>Kreditkarte</td>\n      <td>8.0</td>\n      <td>Norddeutschland</td>\n      <td>Brandenburg</td>\n      <td>Stadt</td>\n      <td>8411.260</td>\n      <td>31.5400</td>\n      <td>0</td>\n      <td>0</td>\n      <td>Kunde</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>10. Apr 85</td>\n      <td>34</td>\n      <td>F</td>\n      <td>single</td>\n      <td>nein</td>\n      <td>Kreditkarte</td>\n      <td>3.0</td>\n      <td>Norddeutschland</td>\n      <td>Mecklenburg-Vorpommern</td>\n      <td>Stadt</td>\n      <td>1230.960</td>\n      <td>405.8920</td>\n      <td>0</td>\n      <td>0</td>\n      <td>Kuendiger</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>04. Feb 75</td>\n      <td>44</td>\n      <td>M</td>\n      <td>single</td>\n      <td>ja</td>\n      <td>Kreditkarte</td>\n      <td>NaN</td>\n      <td>Norddeutschland</td>\n      <td>Hamburg</td>\n      <td>Land</td>\n      <td>396.854</td>\n      <td>529.9040</td>\n      <td>0</td>\n      <td>0</td>\n      <td>Kuendiger</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>17. Aug 78</td>\n      <td>47</td>\n      <td>M</td>\n      <td>NaN</td>\n      <td>nein</td>\n      <td>Kreditkarte</td>\n      <td>3.0</td>\n      <td>Sueddeutschland</td>\n      <td>Thueringen</td>\n      <td>Land</td>\n      <td>8575.380</td>\n      <td>177.2998</td>\n      <td>1</td>\n      <td>0</td>\n      <td>Kunde</td>\n    </tr>\n  </tbody>\n</table>\n</div>"}, "metadata": {}}]}, {"metadata": {"id": "b730db23-7988-4341-ab8d-a86a3a170d6f"}, "cell_type": "code", "source": "df = df.replace({'Kuendiger': 1})\ndf = df.replace({'Kunde': 0})\ndf.head(3)", "execution_count": 28, "outputs": [{"output_type": "execute_result", "execution_count": 28, "data": {"text/plain": "   ID Geburtsdatum  Alter Geschlecht Familienstand HatKinder  Zahlmethode  \\\n0   1   29. Jan 72     47          M        single        ja       Paypal   \n1   2   21. Jul 49     70          F           NaN        ja  Kreditkarte   \n2   3   10. Apr 85     34          F        single      nein  Kreditkarte   \n\n   DAUER_Kundenbeziehung           Region              Bundesland Gebiet  \\\n0                    8.0  Sueddeutschland              Thueringen   Land   \n1                    8.0  Norddeutschland             Brandenburg  Stadt   \n2                    3.0  Norddeutschland  Mecklenburg-Vorpommern  Stadt   \n\n   Umsatz_Total  Umsatz_letztes_Quartal  Oekostrom  Fernwaermeabnehmer  Churn  \n0       8746.71                 280.386          1                   1      1  \n1       8411.26                  31.540          0                   0      0  \n2       1230.96                 405.892          0                   0      1  ", "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ID</th>\n      <th>Geburtsdatum</th>\n      <th>Alter</th>\n      <th>Geschlecht</th>\n      <th>Familienstand</th>\n      <th>HatKinder</th>\n      <th>Zahlmethode</th>\n      <th>DAUER_Kundenbeziehung</th>\n      <th>Region</th>\n      <th>Bundesland</th>\n      <th>Gebiet</th>\n      <th>Umsatz_Total</th>\n      <th>Umsatz_letztes_Quartal</th>\n      <th>Oekostrom</th>\n      <th>Fernwaermeabnehmer</th>\n      <th>Churn</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>29. Jan 72</td>\n      <td>47</td>\n      <td>M</td>\n      <td>single</td>\n      <td>ja</td>\n      <td>Paypal</td>\n      <td>8.0</td>\n      <td>Sueddeutschland</td>\n      <td>Thueringen</td>\n      <td>Land</td>\n      <td>8746.71</td>\n      <td>280.386</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>21. Jul 49</td>\n      <td>70</td>\n      <td>F</td>\n      <td>NaN</td>\n      <td>ja</td>\n      <td>Kreditkarte</td>\n      <td>8.0</td>\n      <td>Norddeutschland</td>\n      <td>Brandenburg</td>\n      <td>Stadt</td>\n      <td>8411.26</td>\n      <td>31.540</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>10. Apr 85</td>\n      <td>34</td>\n      <td>F</td>\n      <td>single</td>\n      <td>nein</td>\n      <td>Kreditkarte</td>\n      <td>3.0</td>\n      <td>Norddeutschland</td>\n      <td>Mecklenburg-Vorpommern</td>\n      <td>Stadt</td>\n      <td>1230.96</td>\n      <td>405.892</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"}, "metadata": {}}]}, {"metadata": {"id": "0b1537ec-f8c3-4a30-9e8a-75792eb2fae3"}, "cell_type": "markdown", "source": "## <font color=grey> Exploratory Data Analysis </font>"}, {"metadata": {"id": "3a8c4b7b-ff3e-43ed-a1a2-4f01671ab678"}, "cell_type": "code", "source": "df.shape", "execution_count": 29, "outputs": [{"output_type": "execute_result", "execution_count": 29, "data": {"text/plain": "(1913, 16)"}, "metadata": {}}]}, {"metadata": {"id": "cb95fbd7-d8a4-4fed-86c8-78f022bc031f"}, "cell_type": "code", "source": "df['Churn'].value_counts().to_frame()", "execution_count": 30, "outputs": [{"output_type": "execute_result", "execution_count": 30, "data": {"text/plain": "   Churn\n0   1125\n1    788", "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Churn</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1125</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>788</td>\n    </tr>\n  </tbody>\n</table>\n</div>"}, "metadata": {}}]}, {"metadata": {"id": "367301f6-5fcb-46ae-ac78-b034208b0efd"}, "cell_type": "code", "source": "df.describe()", "execution_count": 31, "outputs": [{"output_type": "execute_result", "execution_count": 31, "data": {"text/plain": "                ID        Alter  DAUER_Kundenbeziehung  Umsatz_Total  \\\ncount  1913.000000  1913.000000            1911.000000   1845.000000   \nmean    957.000000    57.832201               8.656201   5173.247660   \nstd     552.379851    23.696357               2.277493   2818.921662   \nmin       1.000000    18.000000               1.000000     11.028400   \n25%     479.000000    39.000000               8.000000   2594.900000   \n50%     957.000000    56.000000               9.000000   5316.220000   \n75%    1435.000000    77.000000              11.000000   7746.200000   \nmax    1913.000000   304.000000              11.000000   9948.810000   \n\n       Umsatz_letztes_Quartal    Oekostrom  Fernwaermeabnehmer        Churn  \ncount             1913.000000  1913.000000         1913.000000  1913.000000  \nmean               279.587864     0.161004            0.334553     0.411918  \nstd                173.043607     0.367630            0.471957     0.492309  \nmin                 12.898560     0.000000            0.000000     0.000000  \n25%                107.605600     0.000000            0.000000     0.000000  \n50%                281.474000     0.000000            0.000000     0.000000  \n75%                429.646000     0.000000            1.000000     1.000000  \nmax                598.964000     1.000000            1.000000     1.000000  ", "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ID</th>\n      <th>Alter</th>\n      <th>DAUER_Kundenbeziehung</th>\n      <th>Umsatz_Total</th>\n      <th>Umsatz_letztes_Quartal</th>\n      <th>Oekostrom</th>\n      <th>Fernwaermeabnehmer</th>\n      <th>Churn</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>1913.000000</td>\n      <td>1913.000000</td>\n      <td>1911.000000</td>\n      <td>1845.000000</td>\n      <td>1913.000000</td>\n      <td>1913.000000</td>\n      <td>1913.000000</td>\n      <td>1913.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>957.000000</td>\n      <td>57.832201</td>\n      <td>8.656201</td>\n      <td>5173.247660</td>\n      <td>279.587864</td>\n      <td>0.161004</td>\n      <td>0.334553</td>\n      <td>0.411918</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>552.379851</td>\n      <td>23.696357</td>\n      <td>2.277493</td>\n      <td>2818.921662</td>\n      <td>173.043607</td>\n      <td>0.367630</td>\n      <td>0.471957</td>\n      <td>0.492309</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>1.000000</td>\n      <td>18.000000</td>\n      <td>1.000000</td>\n      <td>11.028400</td>\n      <td>12.898560</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>479.000000</td>\n      <td>39.000000</td>\n      <td>8.000000</td>\n      <td>2594.900000</td>\n      <td>107.605600</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>957.000000</td>\n      <td>56.000000</td>\n      <td>9.000000</td>\n      <td>5316.220000</td>\n      <td>281.474000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>1435.000000</td>\n      <td>77.000000</td>\n      <td>11.000000</td>\n      <td>7746.200000</td>\n      <td>429.646000</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>1913.000000</td>\n      <td>304.000000</td>\n      <td>11.000000</td>\n      <td>9948.810000</td>\n      <td>598.964000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"}, "metadata": {}}]}, {"metadata": {"id": "ea782f60-6787-4a75-8ec6-edce1c97c630"}, "cell_type": "markdown", "source": "## <font color=grey> Visualization</font>"}, {"metadata": {"id": "2d3b6cfa-af11-4da7-b7ee-f37cf262901f"}, "cell_type": "code", "source": "plt.figure(figsize=[20,15])\n\nplt.subplot(331)\nsns.barplot('Geschlecht', 'Churn', data=df, palette = \"Greens\")\n\nplt.subplot(332)\nsns.barplot('Familienstand', 'Churn', data = df, palette = \"Reds\")\n\nplt.subplot(333)\nsns.barplot('Oekostrom', 'Churn', data = df, palette = \"Greys\")", "execution_count": 32, "outputs": [{"output_type": "execute_result", "execution_count": 32, "data": {"text/plain": "<AxesSubplot:xlabel='Oekostrom', ylabel='Churn'>"}, "metadata": {}}, {"output_type": "display_data", "data": {"text/plain": "<Figure size 1440x1080 with 3 Axes>", "image/png": "\n"}, "metadata": {}}]}, {"metadata": {"id": "3a4ebf03-c9fe-4113-98f0-96124b33c17f"}, "cell_type": "markdown", "source": "### <font color=black> Boxplot </font>"}, {"metadata": {"id": "d4653fd6-4549-4034-b6ee-7f3b324419e7"}, "cell_type": "code", "source": "sns.boxplot(x=\"Churn\", y=\"Alter\", data=df)", "execution_count": 33, "outputs": [{"output_type": "execute_result", "execution_count": 33, "data": {"text/plain": "<AxesSubplot:xlabel='Churn', ylabel='Alter'>"}, "metadata": {}}, {"output_type": "display_data", "data": {"text/plain": "<Figure size 432x288 with 1 Axes>", "image/png": "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\n"}, "metadata": {}}]}, {"metadata": {"id": "b279a340-7547-4bc4-bc61-ec4a237504df"}, "cell_type": "markdown", "source": "### <font color=black> Korrelation </font>"}, {"metadata": {"id": "fb508bed-e994-4fa2-ac3a-cd6490c860b7"}, "cell_type": "code", "source": "import seaborn as sns\ncorr = df.corr()\nsns.heatmap(corr, \n            xticklabels=corr.columns.values,\n            yticklabels=corr.columns.values)", "execution_count": 34, "outputs": [{"output_type": "execute_result", "execution_count": 34, "data": {"text/plain": "<AxesSubplot:>"}, "metadata": {}}, {"output_type": "display_data", "data": {"text/plain": "<Figure size 432x288 with 2 Axes>", "image/png": "\n"}, "metadata": {}}]}, {"metadata": {"id": "b41acc6c-ee49-4d17-9dff-3eac07cee3fb"}, "cell_type": "markdown", "source": "## <font color=grey> Missing Values </font>"}, {"metadata": {"id": "94a4f3b6-180c-471e-a725-bff86a540906"}, "cell_type": "code", "source": "df.isnull().sum()", "execution_count": 35, "outputs": [{"output_type": "execute_result", "execution_count": 35, "data": {"text/plain": "ID                          0\nGeburtsdatum                0\nAlter                       0\nGeschlecht                  0\nFamilienstand             699\nHatKinder                   0\nZahlmethode                 0\nDAUER_Kundenbeziehung       2\nRegion                      0\nBundesland                  0\nGebiet                      0\nUmsatz_Total               68\nUmsatz_letztes_Quartal      0\nOekostrom                   0\nFernwaermeabnehmer          0\nChurn                       0\ndtype: int64"}, "metadata": {}}]}, {"metadata": {"id": "bcd35a6c-c79c-43e5-95c2-bc336fa49e23"}, "cell_type": "markdown", "source": "### <font color=black> Impute Missings </font>"}, {"metadata": {"id": "03ff9f16-592a-4a42-b57f-a3370654f931"}, "cell_type": "code", "source": "#Umsatz_Total: \navg_umsatz = df[\"Umsatz_Total\"].mean(axis=0)\ndf[\"Umsatz_Total\"].replace(np.nan, avg_umsatz, inplace=True)\n\n#Familienstand\n#Replace the missing by the most frequent \ndf['Familienstand'].replace(np.nan, \"single\", inplace=True)\n\n# simply drop whole row with NaN in \"price\" column\ndf.dropna(subset=[\"DAUER_Kundenbeziehung\"], axis=0, inplace=True)\n\ndf.reset_index(drop=True, inplace=True)\n\n#Test: Are still missing values in the DF\ndf.isnull().values.any()", "execution_count": 36, "outputs": [{"output_type": "execute_result", "execution_count": 36, "data": {"text/plain": "False"}, "metadata": {}}]}, {"metadata": {"id": "eec2aabc-5bd8-4da2-86ce-43026aa76451"}, "cell_type": "markdown", "source": "## <font color=grey> Data Preparation </font>"}, {"metadata": {"id": "ab31d49e-c472-4323-b839-57f8c94221c5"}, "cell_type": "markdown", "source": "### <font color=Black> Encoding Categorial Data</font>"}, {"metadata": {"id": "eca531d3-df1f-4104-ab6d-cf9157448b21"}, "cell_type": "code", "source": "#implement a viable data encoding\ndef numencode(Inputdaten):\n    CatDaten = Inputdaten.select_dtypes(include=['object'])\n    columns=[]\n    columns = CatDaten.columns.values\n    for col in columns:\n        col = str(col)\n        Inputdaten[col]=pd.Categorical(Inputdaten[col])\n        Inputdaten[col]=Inputdaten[col].cat.codes\n        \ndf_enc = df\nnumencode(df_enc)\ndf_enc.head()", "execution_count": 37, "outputs": [{"output_type": "execute_result", "execution_count": 37, "data": {"text/plain": "   ID  Geburtsdatum  Alter  Geschlecht  Familienstand  HatKinder  Zahlmethode  \\\n0   1           426     47           1              0          0            1   \n1   2           337     70           0              0          0            0   \n2   3           149     34           0              0          1            0   \n3   5           273     47           1              0          1            0   \n4   6           330     45           0              0          0            0   \n\n   DAUER_Kundenbeziehung  Region  Bundesland  Gebiet  Umsatz_Total  \\\n0                    8.0       1          15       0       8746.71   \n1                    8.0       0           3       1       8411.26   \n2                    3.0       0           7       1       1230.96   \n3                    3.0       1          15       0       8575.38   \n4                   11.0       0           4       0       8725.18   \n\n   Umsatz_letztes_Quartal  Oekostrom  Fernwaermeabnehmer  Churn  \n0                280.3860          1                   1      1  \n1                 31.5400          0                   0      0  \n2                405.8920          0                   0      1  \n3                177.2998          1                   0      0  \n4                430.0420          0                   1      0  ", "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ID</th>\n      <th>Geburtsdatum</th>\n      <th>Alter</th>\n      <th>Geschlecht</th>\n      <th>Familienstand</th>\n      <th>HatKinder</th>\n      <th>Zahlmethode</th>\n      <th>DAUER_Kundenbeziehung</th>\n      <th>Region</th>\n      <th>Bundesland</th>\n      <th>Gebiet</th>\n      <th>Umsatz_Total</th>\n      <th>Umsatz_letztes_Quartal</th>\n      <th>Oekostrom</th>\n      <th>Fernwaermeabnehmer</th>\n      <th>Churn</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>426</td>\n      <td>47</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>8.0</td>\n      <td>1</td>\n      <td>15</td>\n      <td>0</td>\n      <td>8746.71</td>\n      <td>280.3860</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>337</td>\n      <td>70</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.0</td>\n      <td>0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>8411.26</td>\n      <td>31.5400</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>149</td>\n      <td>34</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3.0</td>\n      <td>0</td>\n      <td>7</td>\n      <td>1</td>\n      <td>1230.96</td>\n      <td>405.8920</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>5</td>\n      <td>273</td>\n      <td>47</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3.0</td>\n      <td>1</td>\n      <td>15</td>\n      <td>0</td>\n      <td>8575.38</td>\n      <td>177.2998</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>6</td>\n      <td>330</td>\n      <td>45</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>11.0</td>\n      <td>0</td>\n      <td>4</td>\n      <td>0</td>\n      <td>8725.18</td>\n      <td>430.0420</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"}, "metadata": {}}]}, {"metadata": {"id": "5351cede-542c-41e5-90fc-e273320b6d08"}, "cell_type": "markdown", "source": "## <font color=grey> Modeling </font>"}, {"metadata": {"id": "9de43f4b-e866-43d8-8d88-d104ac12cec3"}, "cell_type": "code", "source": "#transform data into vectors\nY = np.array(df_enc['Churn'])\n\ndf_enc = df_enc.drop('ID', 1)\ndf_enc = df_enc.drop('Geburtsdatum', 1)\ndf_enc = df_enc.drop('Churn', 1)\nX = np.array(df_enc)\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.30, random_state=3)", "execution_count": 38, "outputs": []}, {"metadata": {"id": "f8f7879c-4c37-4ee8-a40b-68d9843fc61b"}, "cell_type": "markdown", "source": "## <font color=Black> Logistic Regression</font>"}, {"metadata": {"id": "e60aaf5b-3946-4a58-a52c-b7787e47ab33"}, "cell_type": "code", "source": "LR = LogisticRegression(C=0.44117647058823528, solver='liblinear').fit(X_train,Y_train)\nLR.decision_function", "execution_count": 15, "outputs": [{"output_type": "execute_result", "execution_count": 15, "data": {"text/plain": "<bound method LinearClassifierMixin.decision_function of LogisticRegression(C=0.4411764705882353, solver='liblinear')>"}, "metadata": {}}]}, {"metadata": {"id": "32902edf-79e7-4640-ac6f-116a470d48b2"}, "cell_type": "markdown", "source": "#### Model Evaluation"}, {"metadata": {"id": "0db4cd0f-bfbe-45ed-8b82-31f638d77b88"}, "cell_type": "code", "source": "#\u00dcbersicht\nmodel = LR\nprint ('Accuracy (train set):',metrics.accuracy_score(Y_train, model.predict(X_train)))\nprint ('Accuracy (test set):', metrics.accuracy_score(Y_test, model.predict(X_test) ))\nprint ('AUC:', roc_auc_score(Y_test, model.predict(X_test)))\nprint ('Precision:', metrics.precision_score(Y_test,model.predict(X_test)))\nprint ('Recall:', metrics.recall_score(Y_test, model.predict(X_test)))\nprint ('F1 Score:', metrics.f1_score(Y_test, model.predict(X_test)))", "execution_count": 16, "outputs": [{"output_type": "stream", "text": "Accuracy (train set): 0.6664173522812267\nAccuracy (test set): 0.6184668989547039\nAUC: 0.6071749053880068\nPrecision: 0.4878048780487805\nRecall: 0.5633802816901409\nF1 Score: 0.522875816993464\n", "name": "stdout"}]}, {"metadata": {"id": "27e1caae-e906-48f5-b561-9c02ccdf4824"}, "cell_type": "markdown", "source": "### <font color=Black> Find the most important features </font>"}, {"metadata": {"id": "8c16f883-2000-461b-a82a-6f528aef1991"}, "cell_type": "markdown", "source": "## <font color=Black> Decision Tree</font>"}, {"metadata": {"id": "c3a91451-bfdb-41fc-887c-9c6d32d36990"}, "cell_type": "code", "source": "from sklearn.tree import DecisionTreeClassifier\ndTree = DecisionTreeClassifier(min_samples_leaf=50, criterion=\"entropy\", max_depth = 5)\ndTree.fit(X_train,Y_train)", "execution_count": 17, "outputs": [{"output_type": "execute_result", "execution_count": 17, "data": {"text/plain": "DecisionTreeClassifier(criterion='entropy', max_depth=5, min_samples_leaf=50)"}, "metadata": {}}]}, {"metadata": {"id": "00c67aa8-8786-4693-9310-5913a54d22c5"}, "cell_type": "code", "source": "# Model Evaluation\nmodel = dTree\nprint ('Accuracy (train set):',metrics.accuracy_score(Y_train, model.predict(X_train)))\nprint ('Accuracy (test set):', metrics.accuracy_score(Y_test, model.predict(X_test) ))\nprint ('AUC:', roc_auc_score(Y_test, model.predict(X_test)))\nprint ('Precision:', metrics.precision_score(Y_test,model.predict(X_test)))\nprint ('Recall:', metrics.recall_score(Y_test, model.predict(X_test)))\nprint ('F1 Score:', metrics.f1_score(Y_test, model.predict(X_test)))", "execution_count": 18, "outputs": [{"output_type": "stream", "text": "Accuracy (train set): 0.680628272251309\nAccuracy (test set): 0.627177700348432\nAUC: 0.6160248657224974\nPrecision: 0.49795918367346936\nRecall: 0.5727699530516432\nF1 Score: 0.5327510917030568\n", "name": "stdout"}]}, {"metadata": {"id": "6055dae8-8cc0-4fdd-8cd7-7e873d43c4dc"}, "cell_type": "markdown", "source": "## <font color=grey> Visualization Decision Tree</font>"}, {"metadata": {"id": "9fd4770a-e78f-490d-a310-11a034bdfd80"}, "cell_type": "code", "source": "!pip install graphviz", "execution_count": 19, "outputs": [{"output_type": "stream", "text": "Requirement already satisfied: graphviz in /opt/conda/envs/Python-3.8-main/lib/python3.8/site-packages (0.16)\r\n", "name": "stdout"}]}, {"metadata": {"id": "b290e081-551f-428d-bf7a-38b3d4c4b939"}, "cell_type": "code", "source": "!pip install pydotplus", "execution_count": 20, "outputs": [{"output_type": "stream", "text": "Requirement already satisfied: pydotplus in /opt/conda/envs/Python-3.8-main/lib/python3.8/site-packages (2.0.2)\r\nRequirement already satisfied: pyparsing>=2.0.1 in /opt/conda/envs/Python-3.8-main/lib/python3.8/site-packages (from pydotplus) (2.4.7)\r\n", "name": "stdout"}]}, {"metadata": {"id": "b8cba36747cb4e388f2d76c8ab4021b2"}, "cell_type": "code", "source": "import graphviz\nfrom sklearn import tree\ndot_data = tree.export_graphviz(dTree, out_file=None) \ngraph = graphviz.Source(dot_data) \ngraph.render(\"tree\") ", "execution_count": 21, "outputs": [{"output_type": "execute_result", "execution_count": 21, "data": {"text/plain": "'tree.pdf'"}, "metadata": {}}]}, {"metadata": {"id": "a1bd4f4affa44043bc7e2f7b541a944d"}, "cell_type": "code", "source": "dot_data = tree.export_graphviz(dTree, out_file=None,\n                                feature_names=df_enc.columns[0:13], \n                                filled=True, rounded=True,\n                                special_characters=True)  \ngraph = graphviz.Source(dot_data)\ngraph ", "execution_count": 22, "outputs": [{"output_type": "execute_result", "execution_count": 22, "data": {"text/plain": "<graphviz.files.Source at 0x7f4496cb8b50>", "image/svg+xml": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.40.1 (20161225.0304)\n -->\n<!-- Title: Tree Pages: 1 -->\n<svg width=\"1456pt\" height=\"581pt\"\n viewBox=\"0.00 0.00 1456.00 581.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 577)\">\n<title>Tree</title>\n<polygon fill=\"#ffffff\" stroke=\"transparent\" points=\"-4,4 -4,-577 1452,-577 1452,4 -4,4\"/>\n<!-- 0 -->\n<g id=\"node1\" class=\"node\">\n<title>0</title>\n<path fill=\"#f9e0ce\" stroke=\"#000000\" d=\"M725,-573C725,-573 599,-573 599,-573 593,-573 587,-567 587,-561 587,-561 587,-517 587,-517 587,-511 593,-505 599,-505 599,-505 725,-505 725,-505 731,-505 737,-511 737,-517 737,-517 737,-561 737,-561 737,-567 731,-573 725,-573\"/>\n<text text-anchor=\"start\" x=\"600.5\" y=\"-557.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">Geschlecht \u2264 0.5</text>\n<text text-anchor=\"start\" x=\"603\" y=\"-542.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">entropy = 0.986</text>\n<text text-anchor=\"start\" x=\"603\" y=\"-527.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">samples = 1337</text>\n<text text-anchor=\"start\" x=\"595\" y=\"-512.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">value = [763, 574]</text>\n</g>\n<!-- 1 -->\n<g id=\"node2\" class=\"node\">\n<title>1</title>\n<path fill=\"#efb286\" stroke=\"#000000\" d=\"M630,-469C630,-469 454,-469 454,-469 448,-469 442,-463 442,-457 442,-457 442,-413 442,-413 442,-407 448,-401 454,-401 454,-401 630,-401 630,-401 636,-401 642,-407 642,-413 642,-413 642,-457 642,-457 642,-463 636,-469 630,-469\"/>\n<text text-anchor=\"start\" x=\"450\" y=\"-453.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">Umsatz_Total \u2264 7950.775</text>\n<text text-anchor=\"start\" x=\"483\" y=\"-438.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">entropy = 0.854</text>\n<text text-anchor=\"start\" x=\"487.5\" y=\"-423.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">samples = 688</text>\n<text text-anchor=\"start\" x=\"475\" y=\"-408.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">value = [496, 192]</text>\n</g>\n<!-- 0&#45;&gt;1 -->\n<g id=\"edge1\" class=\"edge\">\n<title>0&#45;&gt;1</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M622.7075,-504.9465C611.9333,-495.6088 600.1436,-485.3911 588.985,-475.7203\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"591.2299,-473.0344 581.3808,-469.13 586.6454,-478.3243 591.2299,-473.0344\"/>\n<text text-anchor=\"middle\" x=\"583.1619\" y=\"-490.3665\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">True</text>\n</g>\n<!-- 16 -->\n<g id=\"node17\" class=\"node\">\n<title>16</title>\n<path fill=\"#c3e1f7\" stroke=\"#000000\" d=\"M893.5,-469C893.5,-469 672.5,-469 672.5,-469 666.5,-469 660.5,-463 660.5,-457 660.5,-457 660.5,-413 660.5,-413 660.5,-407 666.5,-401 672.5,-401 672.5,-401 893.5,-401 893.5,-401 899.5,-401 905.5,-407 905.5,-413 905.5,-413 905.5,-457 905.5,-457 905.5,-463 899.5,-469 893.5,-469\"/>\n<text text-anchor=\"start\" x=\"668.5\" y=\"-453.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">DAUER_Kundenbeziehung \u2264 6.5</text>\n<text text-anchor=\"start\" x=\"724\" y=\"-438.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">entropy = 0.977</text>\n<text text-anchor=\"start\" x=\"728.5\" y=\"-423.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">samples = 649</text>\n<text text-anchor=\"start\" x=\"716\" y=\"-408.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">value = [267, 382]</text>\n</g>\n<!-- 0&#45;&gt;16 -->\n<g id=\"edge16\" class=\"edge\">\n<title>0&#45;&gt;16</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M701.6199,-504.9465C712.484,-495.6088 724.3718,-485.3911 735.6235,-475.7203\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"737.9887,-478.3026 743.2911,-469.13 733.4259,-472.994 737.9887,-478.3026\"/>\n<text text-anchor=\"middle\" x=\"741.4075\" y=\"-490.3589\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">False</text>\n</g>\n<!-- 2 -->\n<g id=\"node3\" class=\"node\">\n<title>2</title>\n<path fill=\"#eeaa7a\" stroke=\"#000000\" d=\"M431,-365C431,-365 305,-365 305,-365 299,-365 293,-359 293,-353 293,-353 293,-309 293,-309 293,-303 299,-297 305,-297 305,-297 431,-297 431,-297 437,-297 443,-303 443,-309 443,-309 443,-353 443,-353 443,-359 437,-365 431,-365\"/>\n<text text-anchor=\"start\" x=\"324.5\" y=\"-349.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">Alter \u2264 41.5</text>\n<text text-anchor=\"start\" x=\"309\" y=\"-334.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">entropy = 0.806</text>\n<text text-anchor=\"start\" x=\"313.5\" y=\"-319.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">samples = 535</text>\n<text text-anchor=\"start\" x=\"301\" y=\"-304.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">value = [403, 132]</text>\n</g>\n<!-- 1&#45;&gt;2 -->\n<g id=\"edge2\" class=\"edge\">\n<title>1&#45;&gt;2</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M485.0259,-400.9465C468.6522,-391.1599 450.6611,-380.4066 433.8011,-370.3294\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"435.4814,-367.2562 425.1021,-365.13 431.8901,-373.2648 435.4814,-367.2562\"/>\n</g>\n<!-- 13 -->\n<g id=\"node14\" class=\"node\">\n<title>13</title>\n<path fill=\"#f6d2b9\" stroke=\"#000000\" d=\"M640.5,-365C640.5,-365 473.5,-365 473.5,-365 467.5,-365 461.5,-359 461.5,-353 461.5,-353 461.5,-309 461.5,-309 461.5,-303 467.5,-297 473.5,-297 473.5,-297 640.5,-297 640.5,-297 646.5,-297 652.5,-303 652.5,-309 652.5,-309 652.5,-353 652.5,-353 652.5,-359 646.5,-365 640.5,-365\"/>\n<text text-anchor=\"start\" x=\"469.5\" y=\"-349.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">Umsatz_Total \u2264 8668.24</text>\n<text text-anchor=\"start\" x=\"498\" y=\"-334.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">entropy = 0.966</text>\n<text text-anchor=\"start\" x=\"502.5\" y=\"-319.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">samples = 153</text>\n<text text-anchor=\"start\" x=\"499\" y=\"-304.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">value = [93, 60]</text>\n</g>\n<!-- 1&#45;&gt;13 -->\n<g id=\"edge13\" class=\"edge\">\n<title>1&#45;&gt;13</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M546.9116,-400.9465C548.1029,-392.6863 549.3937,-383.7374 550.6412,-375.0875\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"554.1139,-375.5272 552.0774,-365.13 547.1856,-374.5279 554.1139,-375.5272\"/>\n</g>\n<!-- 3 -->\n<g id=\"node4\" class=\"node\">\n<title>3</title>\n<path fill=\"#f1ba93\" stroke=\"#000000\" d=\"M276.5,-261C276.5,-261 159.5,-261 159.5,-261 153.5,-261 147.5,-255 147.5,-249 147.5,-249 147.5,-205 147.5,-205 147.5,-199 153.5,-193 159.5,-193 159.5,-193 276.5,-193 276.5,-193 282.5,-193 288.5,-199 288.5,-205 288.5,-205 288.5,-249 288.5,-249 288.5,-255 282.5,-261 276.5,-261\"/>\n<text text-anchor=\"start\" x=\"174.5\" y=\"-245.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">Alter \u2264 32.5</text>\n<text text-anchor=\"start\" x=\"159\" y=\"-230.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">entropy = 0.897</text>\n<text text-anchor=\"start\" x=\"163.5\" y=\"-215.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">samples = 147</text>\n<text text-anchor=\"start\" x=\"155.5\" y=\"-200.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">value = [101, 46]</text>\n</g>\n<!-- 2&#45;&gt;3 -->\n<g id=\"edge3\" class=\"edge\">\n<title>2&#45;&gt;3</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M318.8844,-296.9465C305.0281,-287.3395 289.8283,-276.8009 275.5261,-266.8848\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"277.4382,-263.9515 267.226,-261.13 273.4497,-269.7041 277.4382,-263.9515\"/>\n</g>\n<!-- 6 -->\n<g id=\"node7\" class=\"node\">\n<title>6</title>\n<path fill=\"#eca571\" stroke=\"#000000\" d=\"M435.5,-261C435.5,-261 318.5,-261 318.5,-261 312.5,-261 306.5,-255 306.5,-249 306.5,-249 306.5,-205 306.5,-205 306.5,-199 312.5,-193 318.5,-193 318.5,-193 435.5,-193 435.5,-193 441.5,-193 447.5,-199 447.5,-205 447.5,-205 447.5,-249 447.5,-249 447.5,-255 441.5,-261 435.5,-261\"/>\n<text text-anchor=\"start\" x=\"319.5\" y=\"-245.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">HatKinder \u2264 0.5</text>\n<text text-anchor=\"start\" x=\"318\" y=\"-230.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">entropy = 0.763</text>\n<text text-anchor=\"start\" x=\"322.5\" y=\"-215.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">samples = 388</text>\n<text text-anchor=\"start\" x=\"314.5\" y=\"-200.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">value = [302, 86]</text>\n</g>\n<!-- 2&#45;&gt;6 -->\n<g id=\"edge6\" class=\"edge\">\n<title>2&#45;&gt;6</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M370.9469,-296.9465C371.654,-288.776 372.4194,-279.9318 373.1603,-271.3697\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"376.6712,-271.3945 374.0464,-261.13 369.6972,-270.791 376.6712,-271.3945\"/>\n</g>\n<!-- 4 -->\n<g id=\"node5\" class=\"node\">\n<title>4</title>\n<path fill=\"#eeaa7a\" stroke=\"#000000\" d=\"M122,-149.5C122,-149.5 12,-149.5 12,-149.5 6,-149.5 0,-143.5 0,-137.5 0,-137.5 0,-108.5 0,-108.5 0,-102.5 6,-96.5 12,-96.5 12,-96.5 122,-96.5 122,-96.5 128,-96.5 134,-102.5 134,-108.5 134,-108.5 134,-137.5 134,-137.5 134,-143.5 128,-149.5 122,-149.5\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-134.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">entropy = 0.807</text>\n<text text-anchor=\"start\" x=\"17\" y=\"-119.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">samples = 85</text>\n<text text-anchor=\"start\" x=\"9\" y=\"-104.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">value = [64, 21]</text>\n</g>\n<!-- 3&#45;&gt;4 -->\n<g id=\"edge4\" class=\"edge\">\n<title>3&#45;&gt;4</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M168.557,-192.9465C150.9649,-180.8301 131.2215,-167.232 113.853,-155.2696\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"115.7581,-152.332 105.5372,-149.5422 111.7875,-158.0969 115.7581,-152.332\"/>\n</g>\n<!-- 5 -->\n<g id=\"node6\" class=\"node\">\n<title>5</title>\n<path fill=\"#f7d6bf\" stroke=\"#000000\" d=\"M274,-149.5C274,-149.5 164,-149.5 164,-149.5 158,-149.5 152,-143.5 152,-137.5 152,-137.5 152,-108.5 152,-108.5 152,-102.5 158,-96.5 164,-96.5 164,-96.5 274,-96.5 274,-96.5 280,-96.5 286,-102.5 286,-108.5 286,-108.5 286,-137.5 286,-137.5 286,-143.5 280,-149.5 274,-149.5\"/>\n<text text-anchor=\"start\" x=\"160\" y=\"-134.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">entropy = 0.973</text>\n<text text-anchor=\"start\" x=\"169\" y=\"-119.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">samples = 62</text>\n<text text-anchor=\"start\" x=\"161\" y=\"-104.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">value = [37, 25]</text>\n</g>\n<!-- 3&#45;&gt;5 -->\n<g id=\"edge5\" class=\"edge\">\n<title>3&#45;&gt;5</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M218.3274,-192.9465C218.4302,-182.2621 218.544,-170.4254 218.6483,-159.5742\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"222.1484,-159.5754 218.7448,-149.5422 215.1487,-159.508 222.1484,-159.5754\"/>\n</g>\n<!-- 7 -->\n<g id=\"node8\" class=\"node\">\n<title>7</title>\n<path fill=\"#efb083\" stroke=\"#000000\" d=\"M434.5,-157C434.5,-157 317.5,-157 317.5,-157 311.5,-157 305.5,-151 305.5,-145 305.5,-145 305.5,-101 305.5,-101 305.5,-95 311.5,-89 317.5,-89 317.5,-89 434.5,-89 434.5,-89 440.5,-89 446.5,-95 446.5,-101 446.5,-101 446.5,-145 446.5,-145 446.5,-151 440.5,-157 434.5,-157\"/>\n<text text-anchor=\"start\" x=\"332.5\" y=\"-141.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">Alter \u2264 64.5</text>\n<text text-anchor=\"start\" x=\"317\" y=\"-126.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">entropy = 0.845</text>\n<text text-anchor=\"start\" x=\"321.5\" y=\"-111.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">samples = 191</text>\n<text text-anchor=\"start\" x=\"313.5\" y=\"-96.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">value = [139, 52]</text>\n</g>\n<!-- 6&#45;&gt;7 -->\n<g id=\"edge7\" class=\"edge\">\n<title>6&#45;&gt;7</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M376.6726,-192.9465C376.594,-184.776 376.509,-175.9318 376.4266,-167.3697\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"379.9243,-167.0958 376.3282,-157.13 372.9246,-167.1632 379.9243,-167.0958\"/>\n</g>\n<!-- 10 -->\n<g id=\"node11\" class=\"node\">\n<title>10</title>\n<path fill=\"#ea9b62\" stroke=\"#000000\" d=\"M597,-157C597,-157 477,-157 477,-157 471,-157 465,-151 465,-145 465,-145 465,-101 465,-101 465,-95 471,-89 477,-89 477,-89 597,-89 597,-89 603,-89 609,-95 609,-101 609,-101 609,-145 609,-145 609,-151 603,-157 597,-157\"/>\n<text text-anchor=\"start\" x=\"473\" y=\"-141.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">Bundesland \u2264 7.5</text>\n<text text-anchor=\"start\" x=\"478\" y=\"-126.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">entropy = 0.664</text>\n<text text-anchor=\"start\" x=\"482.5\" y=\"-111.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">samples = 197</text>\n<text text-anchor=\"start\" x=\"474.5\" y=\"-96.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">value = [163, 34]</text>\n</g>\n<!-- 6&#45;&gt;10 -->\n<g id=\"edge10\" class=\"edge\">\n<title>6&#45;&gt;10</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M429.39,-192.9465C444.3082,-183.2497 460.6864,-172.6039 476.0662,-162.6069\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"478.0153,-165.5145 484.4923,-157.13 474.2004,-159.6454 478.0153,-165.5145\"/>\n</g>\n<!-- 8 -->\n<g id=\"node9\" class=\"node\">\n<title>8</title>\n<path fill=\"#eca26c\" stroke=\"#000000\" d=\"M281,-53C281,-53 171,-53 171,-53 165,-53 159,-47 159,-41 159,-41 159,-12 159,-12 159,-6 165,0 171,0 171,0 281,0 281,0 287,0 293,-6 293,-12 293,-12 293,-41 293,-41 293,-47 287,-53 281,-53\"/>\n<text text-anchor=\"start\" x=\"167\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">entropy = 0.734</text>\n<text text-anchor=\"start\" x=\"176\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">samples = 97</text>\n<text text-anchor=\"start\" x=\"168\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">value = [77, 20]</text>\n</g>\n<!-- 7&#45;&gt;8 -->\n<g id=\"edge8\" class=\"edge\">\n<title>7&#45;&gt;8</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M323.1156,-88.9777C307.8856,-79.1798 291.3194,-68.5222 276.2536,-58.8298\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"277.8816,-55.7154 267.5779,-53.2485 274.0943,-61.6024 277.8816,-55.7154\"/>\n</g>\n<!-- 9 -->\n<g id=\"node10\" class=\"node\">\n<title>9</title>\n<path fill=\"#f2c29f\" stroke=\"#000000\" d=\"M433,-53C433,-53 323,-53 323,-53 317,-53 311,-47 311,-41 311,-41 311,-12 311,-12 311,-6 317,0 323,0 323,0 433,0 433,0 439,0 445,-6 445,-12 445,-12 445,-41 445,-41 445,-47 439,-53 433,-53\"/>\n<text text-anchor=\"start\" x=\"319\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">entropy = 0.925</text>\n<text text-anchor=\"start\" x=\"328\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">samples = 94</text>\n<text text-anchor=\"start\" x=\"320\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">value = [62, 32]</text>\n</g>\n<!-- 7&#45;&gt;9 -->\n<g id=\"edge9\" class=\"edge\">\n<title>7&#45;&gt;9</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M376.7051,-88.9777C376.8759,-80.7364 377.0593,-71.887 377.2328,-63.5153\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"380.7376,-63.3189 377.4456,-53.2485 373.7391,-63.1738 380.7376,-63.3189\"/>\n</g>\n<!-- 11 -->\n<g id=\"node12\" class=\"node\">\n<title>11</title>\n<path fill=\"#e78d4c\" stroke=\"#000000\" d=\"M589,-53C589,-53 479,-53 479,-53 473,-53 467,-47 467,-41 467,-41 467,-12 467,-12 467,-6 473,0 479,0 479,0 589,0 589,0 595,0 601,-6 601,-12 601,-12 601,-41 601,-41 601,-47 595,-53 589,-53\"/>\n<text text-anchor=\"start\" x=\"475\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">entropy = 0.428</text>\n<text text-anchor=\"start\" x=\"484\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">samples = 80</text>\n<text text-anchor=\"start\" x=\"480.5\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">value = [73, 7]</text>\n</g>\n<!-- 10&#45;&gt;11 -->\n<g id=\"edge11\" class=\"edge\">\n<title>10&#45;&gt;11</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M535.9423,-88.9777C535.6861,-80.7364 535.411,-71.887 535.1507,-63.5153\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"538.6407,-63.1349 534.8316,-53.2485 531.6441,-63.3524 538.6407,-63.1349\"/>\n</g>\n<!-- 12 -->\n<g id=\"node13\" class=\"node\">\n<title>12</title>\n<path fill=\"#eda774\" stroke=\"#000000\" d=\"M741,-53C741,-53 631,-53 631,-53 625,-53 619,-47 619,-41 619,-41 619,-12 619,-12 619,-6 625,0 631,0 631,0 741,0 741,0 747,0 753,-6 753,-12 753,-12 753,-41 753,-41 753,-47 747,-53 741,-53\"/>\n<text text-anchor=\"start\" x=\"627\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">entropy = 0.779</text>\n<text text-anchor=\"start\" x=\"631.5\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">samples = 117</text>\n<text text-anchor=\"start\" x=\"628\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">value = [90, 27]</text>\n</g>\n<!-- 10&#45;&gt;12 -->\n<g id=\"edge12\" class=\"edge\">\n<title>10&#45;&gt;12</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M589.5318,-88.9777C604.6603,-79.1798 621.116,-68.5222 636.0814,-58.8298\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"638.2084,-61.6222 644.6992,-53.2485 634.4032,-55.7468 638.2084,-61.6222\"/>\n</g>\n<!-- 14 -->\n<g id=\"node15\" class=\"node\">\n<title>14</title>\n<path fill=\"#f8fcfe\" stroke=\"#000000\" d=\"M603,-253.5C603,-253.5 495,-253.5 495,-253.5 489,-253.5 483,-247.5 483,-241.5 483,-241.5 483,-212.5 483,-212.5 483,-206.5 489,-200.5 495,-200.5 495,-200.5 603,-200.5 603,-200.5 609,-200.5 615,-206.5 615,-212.5 615,-212.5 615,-241.5 615,-241.5 615,-247.5 609,-253.5 603,-253.5\"/>\n<text text-anchor=\"start\" x=\"499\" y=\"-238.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">entropy = 1.0</text>\n<text text-anchor=\"start\" x=\"499\" y=\"-223.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">samples = 55</text>\n<text text-anchor=\"start\" x=\"491\" y=\"-208.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">value = [27, 28]</text>\n</g>\n<!-- 13&#45;&gt;14 -->\n<g id=\"edge14\" class=\"edge\">\n<title>13&#45;&gt;14</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M554.3805,-296.9465C553.5586,-286.2621 552.6481,-274.4254 551.8134,-263.5742\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"555.2985,-263.2442 551.0417,-253.5422 548.3191,-263.7812 555.2985,-263.2442\"/>\n</g>\n<!-- 15 -->\n<g id=\"node16\" class=\"node\">\n<title>15</title>\n<path fill=\"#f2be99\" stroke=\"#000000\" d=\"M755,-253.5C755,-253.5 645,-253.5 645,-253.5 639,-253.5 633,-247.5 633,-241.5 633,-241.5 633,-212.5 633,-212.5 633,-206.5 639,-200.5 645,-200.5 645,-200.5 755,-200.5 755,-200.5 761,-200.5 767,-206.5 767,-212.5 767,-212.5 767,-241.5 767,-241.5 767,-247.5 761,-253.5 755,-253.5\"/>\n<text text-anchor=\"start\" x=\"641\" y=\"-238.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">entropy = 0.911</text>\n<text text-anchor=\"start\" x=\"650\" y=\"-223.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">samples = 98</text>\n<text text-anchor=\"start\" x=\"642\" y=\"-208.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">value = [66, 32]</text>\n</g>\n<!-- 13&#45;&gt;15 -->\n<g id=\"edge15\" class=\"edge\">\n<title>13&#45;&gt;15</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M603.8235,-296.9465C620.3321,-284.9403 638.8412,-271.4791 655.1802,-259.5962\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"657.4758,-262.2545 663.5045,-253.5422 653.3585,-256.5933 657.4758,-262.2545\"/>\n</g>\n<!-- 17 -->\n<g id=\"node18\" class=\"node\">\n<title>17</title>\n<path fill=\"#75bbed\" stroke=\"#000000\" d=\"M823,-357.5C823,-357.5 713,-357.5 713,-357.5 707,-357.5 701,-351.5 701,-345.5 701,-345.5 701,-316.5 701,-316.5 701,-310.5 707,-304.5 713,-304.5 713,-304.5 823,-304.5 823,-304.5 829,-304.5 835,-310.5 835,-316.5 835,-316.5 835,-345.5 835,-345.5 835,-351.5 829,-357.5 823,-357.5\"/>\n<text text-anchor=\"start\" x=\"709\" y=\"-342.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">entropy = 0.782</text>\n<text text-anchor=\"start\" x=\"718\" y=\"-327.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">samples = 86</text>\n<text text-anchor=\"start\" x=\"710\" y=\"-312.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">value = [20, 66]</text>\n</g>\n<!-- 16&#45;&gt;17 -->\n<g id=\"edge17\" class=\"edge\">\n<title>16&#45;&gt;17</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M778.0884,-400.9465C776.5474,-390.2621 774.8402,-378.4254 773.2751,-367.5742\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"776.72,-366.9401 771.8282,-357.5422 769.7917,-367.9394 776.72,-366.9401\"/>\n</g>\n<!-- 18 -->\n<g id=\"node19\" class=\"node\">\n<title>18</title>\n<path fill=\"#d4eaf9\" stroke=\"#000000\" d=\"M991,-365C991,-365 865,-365 865,-365 859,-365 853,-359 853,-353 853,-353 853,-309 853,-309 853,-303 859,-297 865,-297 865,-297 991,-297 991,-297 997,-297 1003,-303 1003,-309 1003,-309 1003,-353 1003,-353 1003,-359 997,-365 991,-365\"/>\n<text text-anchor=\"start\" x=\"884.5\" y=\"-349.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">Alter \u2264 28.5</text>\n<text text-anchor=\"start\" x=\"869\" y=\"-334.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">entropy = 0.989</text>\n<text text-anchor=\"start\" x=\"873.5\" y=\"-319.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">samples = 563</text>\n<text text-anchor=\"start\" x=\"861\" y=\"-304.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">value = [247, 316]</text>\n</g>\n<!-- 16&#45;&gt;18 -->\n<g id=\"edge18\" class=\"edge\">\n<title>16&#45;&gt;18</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M830.4784,-400.9465C843.7477,-391.4293 858.2915,-380.9978 872.0035,-371.163\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"874.3288,-373.8024 880.4149,-365.13 870.249,-368.1142 874.3288,-373.8024\"/>\n</g>\n<!-- 19 -->\n<g id=\"node20\" class=\"node\">\n<title>19</title>\n<path fill=\"#f1bc96\" stroke=\"#000000\" d=\"M945,-253.5C945,-253.5 835,-253.5 835,-253.5 829,-253.5 823,-247.5 823,-241.5 823,-241.5 823,-212.5 823,-212.5 823,-206.5 829,-200.5 835,-200.5 835,-200.5 945,-200.5 945,-200.5 951,-200.5 957,-206.5 957,-212.5 957,-212.5 957,-241.5 957,-241.5 957,-247.5 951,-253.5 945,-253.5\"/>\n<text text-anchor=\"start\" x=\"831\" y=\"-238.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">entropy = 0.905</text>\n<text text-anchor=\"start\" x=\"840\" y=\"-223.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">samples = 53</text>\n<text text-anchor=\"start\" x=\"832\" y=\"-208.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">value = [36, 17]</text>\n</g>\n<!-- 18&#45;&gt;19 -->\n<g id=\"edge19\" class=\"edge\">\n<title>18&#45;&gt;19</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M915.5574,-296.9465C911.6132,-286.1519 907.2393,-274.1813 903.2411,-263.2389\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"906.4175,-261.7336 899.6981,-253.5422 899.8427,-264.136 906.4175,-261.7336\"/>\n</g>\n<!-- 20 -->\n<g id=\"node21\" class=\"node\">\n<title>20</title>\n<path fill=\"#c5e2f7\" stroke=\"#000000\" d=\"M1163,-261C1163,-261 987,-261 987,-261 981,-261 975,-255 975,-249 975,-249 975,-205 975,-205 975,-199 981,-193 987,-193 987,-193 1163,-193 1163,-193 1169,-193 1175,-199 1175,-205 1175,-205 1175,-249 1175,-249 1175,-255 1169,-261 1163,-261\"/>\n<text text-anchor=\"start\" x=\"983\" y=\"-245.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">Umsatz_Total \u2264 7769.855</text>\n<text text-anchor=\"start\" x=\"1016\" y=\"-230.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">entropy = 0.978</text>\n<text text-anchor=\"start\" x=\"1020.5\" y=\"-215.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">samples = 510</text>\n<text text-anchor=\"start\" x=\"1008\" y=\"-200.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">value = [211, 299]</text>\n</g>\n<!-- 18&#45;&gt;20 -->\n<g id=\"edge20\" class=\"edge\">\n<title>18&#45;&gt;20</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M976.1333,-296.9465C989.5856,-287.4293 1004.33,-276.9978 1018.2312,-267.163\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"1020.6165,-269.7628 1026.7586,-261.13 1016.5736,-264.0483 1020.6165,-269.7628\"/>\n</g>\n<!-- 21 -->\n<g id=\"node22\" class=\"node\">\n<title>21</title>\n<path fill=\"#d4eaf9\" stroke=\"#000000\" d=\"M1124.5,-157C1124.5,-157 891.5,-157 891.5,-157 885.5,-157 879.5,-151 879.5,-145 879.5,-145 879.5,-101 879.5,-101 879.5,-95 885.5,-89 891.5,-89 891.5,-89 1124.5,-89 1124.5,-89 1130.5,-89 1136.5,-95 1136.5,-101 1136.5,-101 1136.5,-145 1136.5,-145 1136.5,-151 1130.5,-157 1124.5,-157\"/>\n<text text-anchor=\"start\" x=\"887.5\" y=\"-141.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">Umsatz_letztes_Quartal \u2264 59.293</text>\n<text text-anchor=\"start\" x=\"949\" y=\"-126.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">entropy = 0.989</text>\n<text text-anchor=\"start\" x=\"953.5\" y=\"-111.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">samples = 394</text>\n<text text-anchor=\"start\" x=\"941\" y=\"-96.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">value = [173, 221]</text>\n</g>\n<!-- 20&#45;&gt;21 -->\n<g id=\"edge21\" class=\"edge\">\n<title>20&#45;&gt;21</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M1053.0617,-192.9465C1047.451,-184.2373 1041.3471,-174.7626 1035.4958,-165.6801\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"1038.3457,-163.641 1029.9876,-157.13 1032.4611,-167.4321 1038.3457,-163.641\"/>\n</g>\n<!-- 24 -->\n<g id=\"node25\" class=\"node\">\n<title>24</title>\n<path fill=\"#99cdf2\" stroke=\"#000000\" d=\"M1333.5,-157C1333.5,-157 1166.5,-157 1166.5,-157 1160.5,-157 1154.5,-151 1154.5,-145 1154.5,-145 1154.5,-101 1154.5,-101 1154.5,-95 1160.5,-89 1166.5,-89 1166.5,-89 1333.5,-89 1333.5,-89 1339.5,-89 1345.5,-95 1345.5,-101 1345.5,-101 1345.5,-145 1345.5,-145 1345.5,-151 1339.5,-157 1333.5,-157\"/>\n<text text-anchor=\"start\" x=\"1162.5\" y=\"-141.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">Umsatz_Total \u2264 8764.27</text>\n<text text-anchor=\"start\" x=\"1191\" y=\"-126.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">entropy = 0.912</text>\n<text text-anchor=\"start\" x=\"1195.5\" y=\"-111.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">samples = 116</text>\n<text text-anchor=\"start\" x=\"1192\" y=\"-96.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">value = [38, 78]</text>\n</g>\n<!-- 20&#45;&gt;24 -->\n<g id=\"edge24\" class=\"edge\">\n<title>20&#45;&gt;24</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M1132.3015,-192.9465C1148.7694,-183.1599 1166.8638,-172.4066 1183.8207,-162.3294\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"1185.7613,-165.2476 1192.5697,-157.13 1182.1851,-159.23 1185.7613,-165.2476\"/>\n</g>\n<!-- 22 -->\n<g id=\"node23\" class=\"node\">\n<title>22</title>\n<path fill=\"#f8ddca\" stroke=\"#000000\" d=\"M923,-53C923,-53 813,-53 813,-53 807,-53 801,-47 801,-41 801,-41 801,-12 801,-12 801,-6 807,0 813,0 813,0 923,0 923,0 929,0 935,-6 935,-12 935,-12 935,-41 935,-41 935,-47 929,-53 923,-53\"/>\n<text text-anchor=\"start\" x=\"809\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">entropy = 0.983</text>\n<text text-anchor=\"start\" x=\"818\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">samples = 78</text>\n<text text-anchor=\"start\" x=\"810\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">value = [45, 33]</text>\n</g>\n<!-- 21&#45;&gt;22 -->\n<g id=\"edge22\" class=\"edge\">\n<title>21&#45;&gt;22</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M958.6412,-88.9777C944.5594,-79.2713 929.2537,-68.7213 915.298,-59.1018\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"917.026,-56.042 906.8061,-53.2485 913.0533,-61.8055 917.026,-56.042\"/>\n</g>\n<!-- 23 -->\n<g id=\"node24\" class=\"node\">\n<title>23</title>\n<path fill=\"#c0e0f7\" stroke=\"#000000\" d=\"M1091,-53C1091,-53 965,-53 965,-53 959,-53 953,-47 953,-41 953,-41 953,-12 953,-12 953,-6 959,0 965,0 965,0 1091,0 1091,0 1097,0 1103,-6 1103,-12 1103,-12 1103,-41 1103,-41 1103,-47 1097,-53 1091,-53\"/>\n<text text-anchor=\"start\" x=\"969\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">entropy = 0.974</text>\n<text text-anchor=\"start\" x=\"973.5\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">samples = 316</text>\n<text text-anchor=\"start\" x=\"961\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">value = [128, 188]</text>\n</g>\n<!-- 21&#45;&gt;23 -->\n<g id=\"edge23\" class=\"edge\">\n<title>21&#45;&gt;23</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M1015.0513,-88.9777C1016.7783,-80.6449 1018.6341,-71.6903 1020.3862,-63.2364\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"1023.854,-63.7507 1022.4563,-53.2485 1016.9996,-62.3301 1023.854,-63.7507\"/>\n</g>\n<!-- 25 -->\n<g id=\"node26\" class=\"node\">\n<title>25</title>\n<path fill=\"#7abded\" stroke=\"#000000\" d=\"M1284,-53C1284,-53 1174,-53 1174,-53 1168,-53 1162,-47 1162,-41 1162,-41 1162,-12 1162,-12 1162,-6 1168,0 1174,0 1174,0 1284,0 1284,0 1290,0 1296,-6 1296,-12 1296,-12 1296,-41 1296,-41 1296,-47 1290,-53 1284,-53\"/>\n<text text-anchor=\"start\" x=\"1170\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">entropy = 0.805</text>\n<text text-anchor=\"start\" x=\"1179\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">samples = 61</text>\n<text text-anchor=\"start\" x=\"1171\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">value = [15, 46]</text>\n</g>\n<!-- 24&#45;&gt;25 -->\n<g id=\"edge25\" class=\"edge\">\n<title>24&#45;&gt;25</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M1242.5962,-88.9777C1240.7828,-80.6449 1238.8341,-71.6903 1236.9945,-63.2364\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"1240.3673,-62.2755 1234.8209,-53.2485 1233.5274,-63.7641 1240.3673,-62.2755\"/>\n</g>\n<!-- 26 -->\n<g id=\"node27\" class=\"node\">\n<title>26</title>\n<path fill=\"#c7e3f8\" stroke=\"#000000\" d=\"M1436,-53C1436,-53 1326,-53 1326,-53 1320,-53 1314,-47 1314,-41 1314,-41 1314,-12 1314,-12 1314,-6 1320,0 1326,0 1326,0 1436,0 1436,0 1442,0 1448,-6 1448,-12 1448,-12 1448,-41 1448,-41 1448,-47 1442,-53 1436,-53\"/>\n<text text-anchor=\"start\" x=\"1322\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">entropy = 0.981</text>\n<text text-anchor=\"start\" x=\"1331\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">samples = 55</text>\n<text text-anchor=\"start\" x=\"1323\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">value = [23, 32]</text>\n</g>\n<!-- 24&#45;&gt;26 -->\n<g id=\"edge26\" class=\"edge\">\n<title>24&#45;&gt;26</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M1296.1857,-88.9777C1309.2379,-79.3629 1323.4139,-68.9203 1336.3727,-59.3743\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"1338.7131,-61.9974 1344.6886,-53.2485 1334.5614,-56.3615 1338.7131,-61.9974\"/>\n</g>\n</g>\n</svg>\n"}, "metadata": {}}]}, {"metadata": {"id": "c3804cab-f85e-4e4f-936d-05f0fe8a35af"}, "cell_type": "markdown", "source": "## XGBoost"}, {"metadata": {"id": "1380d244-7f4a-44ed-b666-076f69af6911"}, "cell_type": "code", "source": "from xgboost import XGBClassifier", "execution_count": 24, "outputs": []}, {"metadata": {"id": "d3db8d30-c05b-4f57-b458-23f9c90a5ff0"}, "cell_type": "code", "source": "xgb= XGBClassifier(base_score=0.5, colsample_bylevel=1, colsample_bytree=0.6,\n       gamma=5, learning_rate=0.02, max_delta_step=0, max_depth=5,\n       min_child_weight=5, missing=None, n_estimators=600, nthread=1,\n       objective='binary:logistic', reg_alpha=0, reg_lambda=1,\n       scale_pos_weight=1, seed=0, subsample=1.0)\nxgb.fit(X_train, Y_train)", "execution_count": 25, "outputs": [{"output_type": "stream", "text": "[18:35:42] WARNING: /opt/conda/conda-bld/xgboost-base_1623879419395/work/src/learner.cc:1061: Starting in XGBoost 1.3.0, the default evaluation metric used with the objective 'binary:logistic' was changed from 'error' to 'logloss'. Explicitly set eval_metric if you'd like to restore the old behavior.\n", "name": "stdout"}, {"output_type": "execute_result", "execution_count": 25, "data": {"text/plain": "XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n              colsample_bynode=1, colsample_bytree=0.6, gamma=5, gpu_id=-1,\n              importance_type='gain', interaction_constraints='',\n              learning_rate=0.02, max_delta_step=0, max_depth=5,\n              min_child_weight=5, missing=None, monotone_constraints='()',\n              n_estimators=600, n_jobs=1, nthread=1, num_parallel_tree=1,\n              random_state=0, reg_alpha=0, reg_lambda=1, scale_pos_weight=1,\n              seed=0, subsample=1.0, tree_method='exact', validate_parameters=1,\n              verbosity=None)"}, "metadata": {}}]}, {"metadata": {"id": "6f94ca9f-1144-40be-8bf4-4cd65b19356b"}, "cell_type": "code", "source": "# Modelevaluation\nmodel = xgb\nprint ('Accuracy (train set):',metrics.accuracy_score(Y_train, model.predict(X_train)))\nprint ('Accuracy (test set):', metrics.accuracy_score(Y_test, model.predict(X_test) ))\nprint ('AUC:', roc_auc_score(Y_test, model.predict(X_test)))\nprint ('Precision:', metrics.precision_score(Y_test,model.predict(X_test)))\nprint ('Recall:', metrics.recall_score(Y_test, model.predict(X_test)))\nprint ('F1 Score:', metrics.f1_score(Y_test, model.predict(X_test)))", "execution_count": 26, "outputs": [{"output_type": "stream", "text": "Accuracy (train set): 0.6993268511593119\nAccuracy (test set): 0.6550522648083623\nAUC: 0.6314488965185387\nPrecision: 0.5348837209302325\nRecall: 0.539906103286385\nF1 Score: 0.5373831775700934\n", "name": "stdout"}]}, {"metadata": {"id": "e1199908-b6cd-4d26-8d77-d9d91bbdf756"}, "cell_type": "markdown", "source": "## Model Comparison"}, {"metadata": {"id": "4589bcc0-a998-4778-b308-91cf711de1b9"}, "cell_type": "code", "source": "# Model Evaluation: ACCURACY TEST\nprint ('ACCURACY TEST DATA')\nprint ('Logistic Regression:', metrics.accuracy_score(Y_test, LR.predict(X_test)))\nprint ('Decision Tree:', metrics.accuracy_score(Y_test, dTree.predict(X_test)))\nprint ('XGBoost', metrics.accuracy_score(Y_test, xgb.predict(X_test)))", "execution_count": 27, "outputs": [{"output_type": "stream", "text": "ACCURACY TEST DATA\nLogistic Regression: 0.6184668989547039\nDecision Tree: 0.627177700348432\nXGBoost 0.6550522648083623\n", "name": "stdout"}]}, {"metadata": {"id": "aa44fefc-7db4-4bfb-98df-8941b7eb6bf3"}, "cell_type": "code", "source": "# Model Evaluation AUC\nprint ('AUC')\nprint ('Logistic Regression:', roc_auc_score(Y_test, LR.predict(X_test)))\nprint ('Decision Tree:', roc_auc_score(Y_test, dTree.predict(X_test)))\nprint ('XGBoost:', roc_auc_score(Y_test, xgb.predict(X_test)))", "execution_count": 28, "outputs": [{"output_type": "stream", "text": "AUC\nLogistic Regression: 0.6071749053880068\nDecision Tree: 0.6160248657224974\nXGBoost: 0.6314488965185387\n", "name": "stdout"}]}, {"metadata": {"id": "ddab6759-6a81-4aef-b053-ad6701022c4c"}, "cell_type": "markdown", "source": "## <font color=grey> Scoring New Data </font>"}, {"metadata": {"id": "97fabac91abd47618d168214c7f7827f"}, "cell_type": "code", "source": "#Load Scoring Data\ndf1 = pd.read_csv(wslib.mount.get_data_path('EVU_Scoring.csv'))\n\n#Impute Missing Values\navg_umsatz = df1[\"Umsatz_Total\"].mean(axis=0)\ndf1[\"Umsatz_Total\"].replace(np.nan, avg_umsatz, inplace=True)\ndfscore = df1\n\n#Dataprep\ndf1 = df1.drop(['Geburtsdatum'], axis =1)\ndf1 = df1.drop(['ssID'], axis =1)\n\n#Data Encoding\ndef numencode(Inputdaten):\n    CatDaten = Inputdaten.select_dtypes(include=['object'])\n    columns=[]\n    columns = CatDaten.columns.values\n    for col in columns:\n        col = str(col)\n        Inputdaten[col]=pd.Categorical(Inputdaten[col])\n        Inputdaten[col]=Inputdaten[col].cat.codes\nnumencode(df1)\n\ndf1.head()", "execution_count": 29, "outputs": [{"output_type": "execute_result", "execution_count": 29, "data": {"text/plain": "   Geschlecht  Familienstand  HatKinder  Zahlmethode  DAUER_Kundenbeziehung  \\\n0           1             -1          1            1                   11.0   \n1           1             -1          1            0                    8.0   \n2           0              0          1            1                   11.0   \n3           1              0          1            0                   11.0   \n4           1             -1          0            1                   11.0   \n\n   Region  Bundesland  Gebiet  Umsatz_Total  Umsatz_letztes_Quartal  ...  \\\n0       1          13       1       5831.02                 308.318  ...   \n1       0           9       1       2351.14                 335.972  ...   \n2       0           4       1       7045.95                 428.924  ...   \n3       1          15       1       9041.49                 220.930  ...   \n4       1           0       1       6782.35                 292.034  ...   \n\n   Distinguiert Konservativer  Gesunder Kraftprotz  Unkritisch Wehleidiger  \\\n0                           0                    1                       0   \n1                           0                    1                       0   \n2                           2                    2                       1   \n3                           0                    2                       2   \n4                           2                    2                       2   \n\n   Skeptischer Verweigere  Informierter Koerperbewusster  \\\n0                       0                              1   \n1                       0                              2   \n2                       0                              2   \n3                       2                              1   \n4                       0                              1   \n\n   Eingeschraenkter Kassenpatient  Konservativer Arztglaeubiger  Aboscore  \\\n0                               0                             1         0   \n1                               0                             1         2   \n2                               0                             1         2   \n3                               0                             1         0   \n4                               0                             0         0   \n\n   Sinus-Milieus  CRM Kommentar  \n0              2             35  \n1              2             14  \n2              3              5  \n3              4             22  \n4              8              5  \n\n[5 rows x 37 columns]", "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Geschlecht</th>\n      <th>Familienstand</th>\n      <th>HatKinder</th>\n      <th>Zahlmethode</th>\n      <th>DAUER_Kundenbeziehung</th>\n      <th>Region</th>\n      <th>Bundesland</th>\n      <th>Gebiet</th>\n      <th>Umsatz_Total</th>\n      <th>Umsatz_letztes_Quartal</th>\n      <th>...</th>\n      <th>Distinguiert Konservativer</th>\n      <th>Gesunder Kraftprotz</th>\n      <th>Unkritisch Wehleidiger</th>\n      <th>Skeptischer Verweigere</th>\n      <th>Informierter Koerperbewusster</th>\n      <th>Eingeschraenkter Kassenpatient</th>\n      <th>Konservativer Arztglaeubiger</th>\n      <th>Aboscore</th>\n      <th>Sinus-Milieus</th>\n      <th>CRM Kommentar</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>-1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>11.0</td>\n      <td>1</td>\n      <td>13</td>\n      <td>1</td>\n      <td>5831.02</td>\n      <td>308.318</td>\n      <td>...</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>35</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>-1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>8.0</td>\n      <td>0</td>\n      <td>9</td>\n      <td>1</td>\n      <td>2351.14</td>\n      <td>335.972</td>\n      <td>...</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>0</td>\n      <td>1</td>\n      <td>2</td>\n      <td>2</td>\n      <td>14</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>11.0</td>\n      <td>0</td>\n      <td>4</td>\n      <td>1</td>\n      <td>7045.95</td>\n      <td>428.924</td>\n      <td>...</td>\n      <td>2</td>\n      <td>2</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>0</td>\n      <td>1</td>\n      <td>2</td>\n      <td>3</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>11.0</td>\n      <td>1</td>\n      <td>15</td>\n      <td>1</td>\n      <td>9041.49</td>\n      <td>220.930</td>\n      <td>...</td>\n      <td>0</td>\n      <td>2</td>\n      <td>2</td>\n      <td>2</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>4</td>\n      <td>22</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>-1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>11.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>6782.35</td>\n      <td>292.034</td>\n      <td>...</td>\n      <td>2</td>\n      <td>2</td>\n      <td>2</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8</td>\n      <td>5</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows \u00d7 37 columns</p>\n</div>"}, "metadata": {}}]}, {"metadata": {"id": "023383a7-9801-4e6c-afc1-b950892f7e4c"}, "cell_type": "code", "source": "X1 = np.array(df1[['Geschlecht', 'Familienstand', 'HatKinder', 'Zahlmethode', 'DAUER_Kundenbeziehung', 'Region',\n                     'Bundesland', 'Gebiet', 'Umsatz_Total','Umsatz_letztes_Quartal', 'Oekostrom', 'Fernwaermeabnehmer', 'Alter']])", "execution_count": 30, "outputs": []}, {"metadata": {"id": "3b50f153-7d81-41db-976b-128d91edfaaf"}, "cell_type": "code", "source": "predict = xgb.predict(X1)", "execution_count": 31, "outputs": []}, {"metadata": {"id": "3a7fd3b9-b9ed-41a6-a0dc-5478f7ccbf60"}, "cell_type": "code", "source": "proba = xgb.predict_proba(X1)[:,1]", "execution_count": 32, "outputs": []}, {"metadata": {"id": "9189715c-8828-469b-91f3-a473067a701d"}, "cell_type": "code", "source": "dfscore['Prediction'] = predict\ndfscore['Probability'] = proba\ndfscore.head(5)", "execution_count": 33, "outputs": [{"output_type": "execute_result", "execution_count": 33, "data": {"text/plain": "   ssID Geburtsdatum Geschlecht Familienstand HatKinder  Zahlmethode  \\\n0  2000   10. Feb 71          M           NaN      nein       Paypal   \n1  2001   07. Nov 63          M           NaN      nein  Kreditkarte   \n2  2002   20. Okt 89          F        single      nein       Paypal   \n3  2003   07. Jul 62          M        single      nein  Kreditkarte   \n4  2004   14. Sep 89          M           NaN        ja       Paypal   \n\n   DAUER_Kundenbeziehung           Region           Bundesland Gebiet  ...  \\\n0                   11.0  Sueddeutschland       Sachsen-Anhalt  Stadt  ...   \n1                    8.0  Norddeutschland  Nordrhein-Westfalen  Stadt  ...   \n2                   11.0  Norddeutschland               Bremen  Stadt  ...   \n3                   11.0  Sueddeutschland           Thueringen  Stadt  ...   \n4                   11.0  Sueddeutschland   Baden-Wuerttemberg  Stadt  ...   \n\n        Unkritisch Wehleidiger       Skeptischer Verweigere  \\\n0   geringe Wahrscheinlichkeit   geringe Wahrscheinlichkeit   \n1   geringe Wahrscheinlichkeit   geringe Wahrscheinlichkeit   \n2      hohe Wahrscheinlichkeit   geringe Wahrscheinlichkeit   \n3  mittlere Wahrscheinlichkeit  mittlere Wahrscheinlichkeit   \n4  mittlere Wahrscheinlichkeit   geringe Wahrscheinlichkeit   \n\n   Informierter Koerperbewusster  Eingeschraenkter Kassenpatient  \\\n0        hohe Wahrscheinlichkeit         hohe Wahrscheinlichkeit   \n1    mittlere Wahrscheinlichkeit         hohe Wahrscheinlichkeit   \n2    mittlere Wahrscheinlichkeit         hohe Wahrscheinlichkeit   \n3        hohe Wahrscheinlichkeit         hohe Wahrscheinlichkeit   \n4        hohe Wahrscheinlichkeit         hohe Wahrscheinlichkeit   \n\n   Konservativer Arztglaeubiger                     Aboscore Sinus-Milieus  \\\n0       hohe Wahrscheinlichkeit   geringe Wahrscheinlichkeit           ETB   \n1       hohe Wahrscheinlichkeit  mittlere Wahrscheinlichkeit           ETB   \n2       hohe Wahrscheinlichkeit  mittlere Wahrscheinlichkeit           HED   \n3       hohe Wahrscheinlichkeit   geringe Wahrscheinlichkeit           INT   \n4    geringe Wahrscheinlichkeit   geringe Wahrscheinlichkeit           STA   \n\n                                       CRM Kommentar Prediction Probability  \n0  schon die dritte Anfrage wegen Regulierung - K...          0    0.373155  \n1  Premium Option 3 ist zu teuer. Kunde zoegert noch          0    0.373155  \n2      Kunde informierte sich zu neuem Rabattangebot          0    0.380951  \n3                        denkt ueber Kuendigung nach          0    0.373155  \n4      Kunde informierte sich zu neuem Rabattangebot          0    0.374200  \n\n[5 rows x 41 columns]", "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ssID</th>\n      <th>Geburtsdatum</th>\n      <th>Geschlecht</th>\n      <th>Familienstand</th>\n      <th>HatKinder</th>\n      <th>Zahlmethode</th>\n      <th>DAUER_Kundenbeziehung</th>\n      <th>Region</th>\n      <th>Bundesland</th>\n      <th>Gebiet</th>\n      <th>...</th>\n      <th>Unkritisch Wehleidiger</th>\n      <th>Skeptischer Verweigere</th>\n      <th>Informierter Koerperbewusster</th>\n      <th>Eingeschraenkter Kassenpatient</th>\n      <th>Konservativer Arztglaeubiger</th>\n      <th>Aboscore</th>\n      <th>Sinus-Milieus</th>\n      <th>CRM Kommentar</th>\n      <th>Prediction</th>\n      <th>Probability</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2000</td>\n      <td>10. Feb 71</td>\n      <td>M</td>\n      <td>NaN</td>\n      <td>nein</td>\n      <td>Paypal</td>\n      <td>11.0</td>\n      <td>Sueddeutschland</td>\n      <td>Sachsen-Anhalt</td>\n      <td>Stadt</td>\n      <td>...</td>\n      <td>geringe Wahrscheinlichkeit</td>\n      <td>geringe Wahrscheinlichkeit</td>\n      <td>hohe Wahrscheinlichkeit</td>\n      <td>hohe Wahrscheinlichkeit</td>\n      <td>hohe Wahrscheinlichkeit</td>\n      <td>geringe Wahrscheinlichkeit</td>\n      <td>ETB</td>\n      <td>schon die dritte Anfrage wegen Regulierung - K...</td>\n      <td>0</td>\n      <td>0.373155</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2001</td>\n      <td>07. Nov 63</td>\n      <td>M</td>\n      <td>NaN</td>\n      <td>nein</td>\n      <td>Kreditkarte</td>\n      <td>8.0</td>\n      <td>Norddeutschland</td>\n      <td>Nordrhein-Westfalen</td>\n      <td>Stadt</td>\n      <td>...</td>\n      <td>geringe Wahrscheinlichkeit</td>\n      <td>geringe Wahrscheinlichkeit</td>\n      <td>mittlere Wahrscheinlichkeit</td>\n      <td>hohe Wahrscheinlichkeit</td>\n      <td>hohe Wahrscheinlichkeit</td>\n      <td>mittlere Wahrscheinlichkeit</td>\n      <td>ETB</td>\n      <td>Premium Option 3 ist zu teuer. Kunde zoegert noch</td>\n      <td>0</td>\n      <td>0.373155</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2002</td>\n      <td>20. Okt 89</td>\n      <td>F</td>\n      <td>single</td>\n      <td>nein</td>\n      <td>Paypal</td>\n      <td>11.0</td>\n      <td>Norddeutschland</td>\n      <td>Bremen</td>\n      <td>Stadt</td>\n      <td>...</td>\n      <td>hohe Wahrscheinlichkeit</td>\n      <td>geringe Wahrscheinlichkeit</td>\n      <td>mittlere Wahrscheinlichkeit</td>\n      <td>hohe Wahrscheinlichkeit</td>\n      <td>hohe Wahrscheinlichkeit</td>\n      <td>mittlere Wahrscheinlichkeit</td>\n      <td>HED</td>\n      <td>Kunde informierte sich zu neuem Rabattangebot</td>\n      <td>0</td>\n      <td>0.380951</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2003</td>\n      <td>07. Jul 62</td>\n      <td>M</td>\n      <td>single</td>\n      <td>nein</td>\n      <td>Kreditkarte</td>\n      <td>11.0</td>\n      <td>Sueddeutschland</td>\n      <td>Thueringen</td>\n      <td>Stadt</td>\n      <td>...</td>\n      <td>mittlere Wahrscheinlichkeit</td>\n      <td>mittlere Wahrscheinlichkeit</td>\n      <td>hohe Wahrscheinlichkeit</td>\n      <td>hohe Wahrscheinlichkeit</td>\n      <td>hohe Wahrscheinlichkeit</td>\n      <td>geringe Wahrscheinlichkeit</td>\n      <td>INT</td>\n      <td>denkt ueber Kuendigung nach</td>\n      <td>0</td>\n      <td>0.373155</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2004</td>\n      <td>14. Sep 89</td>\n      <td>M</td>\n      <td>NaN</td>\n      <td>ja</td>\n      <td>Paypal</td>\n      <td>11.0</td>\n      <td>Sueddeutschland</td>\n      <td>Baden-Wuerttemberg</td>\n      <td>Stadt</td>\n      <td>...</td>\n      <td>mittlere Wahrscheinlichkeit</td>\n      <td>geringe Wahrscheinlichkeit</td>\n      <td>hohe Wahrscheinlichkeit</td>\n      <td>hohe Wahrscheinlichkeit</td>\n      <td>geringe Wahrscheinlichkeit</td>\n      <td>geringe Wahrscheinlichkeit</td>\n      <td>STA</td>\n      <td>Kunde informierte sich zu neuem Rabattangebot</td>\n      <td>0</td>\n      <td>0.374200</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows \u00d7 41 columns</p>\n</div>"}, "metadata": {}}]}, {"metadata": {"id": "540a3b14-9d91-4670-8699-7c924a7854d0"}, "cell_type": "markdown", "source": "## <font color=grey> Deployment </font>"}, {"metadata": {"id": "ec0be5daf3c243ca82bf019ee862ee04"}, "cell_type": "code", "source": "!pip install -U ibm-watson-machine-learning | tail -n 1", "execution_count": 40, "outputs": [{"output_type": "stream", "text": "Requirement already satisfied: pyparsing>=2.0.2 in /opt/conda/envs/Python-3.8-main/lib/python3.8/site-packages (from packaging->ibm-watson-machine-learning) (2.4.7)\r\n", "name": "stdout"}]}, {"metadata": {"id": "f200762590b9424d8772e7b7520cd5ee"}, "cell_type": "code", "source": "# @hidden_cell\nusername = 'ritchie'\npassword = 'Enigma'\nurl = 'https://internal-nginx-svc:12443'", "execution_count": 14, "outputs": []}, {"metadata": {"id": "0c3bdbb0685444168079f3da4f4fc299"}, "cell_type": "code", "source": "wml_credentials = {\n    \"username\": username,\n    \"password\": password,\n    \"url\": url,\n    \"instance_id\": 'openshift',\n    \"version\": '4.0'\n}\n\nfrom ibm_watson_machine_learning import APIClient\nclient = APIClient(wml_credentials)", "execution_count": 15, "outputs": []}, {"metadata": {"id": "ace949cd16704ef19e90a71de92ad170"}, "cell_type": "code", "source": "# Get the Project ID and set the location to save the model to the project\nimport os\nproject_id = os.environ['PROJECT_ID']\nclient.set.default_project(project_id)", "execution_count": 16, "outputs": [{"output_type": "execute_result", "execution_count": 16, "data": {"text/plain": "'SUCCESS'"}, "metadata": {}}]}, {"metadata": {"id": "448b9431a44e4cb39766ffe0fb9d9f29"}, "cell_type": "code", "source": "# Test\nclient.data_assets.list()", "execution_count": 44, "outputs": [{"output_type": "stream", "text": "----------------------  ----------  ------  ------------------------------------\nNAME                    ASSET_TYPE  SIZE    ASSET_ID\nEVU_Stammdaten.csv      data_asset  203962  4bc02e4b-21c1-4373-ae0b-98a5248e5213\nEVU_Kommentare.csv      data_asset  98670   5df722d9-97de-4f3d-9c0e-023fb012ff51\nEVU_Scoring.csv         data_asset  325236  baa18ff2-d80a-430f-aa9a-cfbc5617d76c\nEVU_Mikrogeografie.csv  data_asset  958354  28286a40-f0c6-41e6-b543-fa998d5094e0\n----------------------  ----------  ------  ------------------------------------\n", "name": "stdout"}]}, {"metadata": {"id": "2399dee1763b4415bd91c0c5769cca4d"}, "cell_type": "code", "source": "sofware_spec_uid = client.software_specifications.get_id_by_name(\"default_py3.8\")", "execution_count": 47, "outputs": []}, {"metadata": {"id": "33c011fb82164aeb93f3e1a9e36b02c7"}, "cell_type": "code", "source": "metadata = {\n            client.repository.ModelMetaNames.NAME: 'Decision Tree V1',\n            client.repository.ModelMetaNames.TYPE: 'scikit-learn_0.23',\n            client.repository.ModelMetaNames.SOFTWARE_SPEC_UID: sofware_spec_uid\n}\n\npublished_model = client.repository.store_model(\n    model=dTree,\n    meta_props=metadata,\n    training_data=df_enc,\n    training_target=df['Churn'])", "execution_count": 48, "outputs": []}, {"metadata": {"id": "d966e0861c0c4712b62ad4b7e83fb7dc"}, "cell_type": "code", "source": "#get all models\nmodels_details = client.repository.list_models()", "execution_count": 49, "outputs": [{"output_type": "stream", "text": "------------------------------------  ----------------------------------------  ------------------------  -----------------\nID                                    NAME                                      CREATED                   TYPE\n69fb1b4e-2522-4efd-922e-abb4e7e85451  Decision Tree V1                          2021-09-29T18:39:44.002Z  scikit-learn_0.23\n5168e0df-b1ba-4d0e-956e-06e81fc649a0  Decision Tree                             2021-09-29T18:09:37.002Z  scikit-learn_0.23\ncfd9bfb4-3dfe-4373-b6e7-ca0acb537334  AutoAI - P3 Gradient Boosting Classifier  2021-09-29T17:47:49.002Z  wml-hybrid_0.1\n------------------------------------  ----------------------------------------  ------------------------  -----------------\n", "name": "stdout"}]}, {"metadata": {"id": "0bb8b332569e49bfbb6efeb4c56d3b35"}, "cell_type": "markdown", "source": "## <font color=grey> Prepare Scoring Payload  </font>"}, {"metadata": {"id": "1b7b4c1b0d664653a0a59e9c2d058ad8"}, "cell_type": "code", "source": "# Select one customer (as Numpy Array)\ninput = np.array(X_test[0], int)\ninput", "execution_count": 50, "outputs": [{"output_type": "execute_result", "execution_count": 50, "data": {"text/plain": "array([  94,    1,    0,    0,    0,   11,    1,   15,    1, 6675,  107,\n          0,    0])"}, "metadata": {}}]}, {"metadata": {"id": "63177ee2-b17d-4b7b-becc-eaa311ce8713"}, "cell_type": "code", "source": "# Predict Credit Default\nprint(dTree.predict(input.reshape(-1, 13)))\nprint(dTree.predict_proba(input.reshape(-1, 13))[:,1])", "execution_count": 51, "outputs": [{"output_type": "stream", "text": "[1]\n[0.59493671]\n", "name": "stdout"}]}, {"metadata": {"id": "a36bbddbf5dc4bdda71fc08439729e5e"}, "cell_type": "code", "source": "import json\nscoring_values = input.tolist()\nscoring_payload = {\"input_data\": [{\"values\": [scoring_values]}]}\nprint(json.dumps(scoring_payload))", "execution_count": 52, "outputs": [{"output_type": "stream", "text": "{\"input_data\": [{\"values\": [[94, 1, 0, 0, 0, 11, 1, 15, 1, 6675, 107, 0, 0]]}]}\n", "name": "stdout"}]}, {"metadata": {"id": "f6be9bbc2b6447cf83a0a6df8ad250e1"}, "cell_type": "markdown", "source": "## <font color=grey> Realtime Scoring  </font>"}, {"metadata": {"id": "08d960d32226458e85ac83b36eece2a5"}, "cell_type": "code", "source": "!pip list | grep watson", "execution_count": 42, "outputs": [{"output_type": "stream", "text": "ibm-watson-machine-learning 1.0.105\r\nibm-watson-openscale        3.0.7\r\nibm-watson-studio-lib       3.0.4\r\n", "name": "stdout"}]}, {"metadata": {"id": "d0e0f3def2bc4c37859e8a8fb4b55c21"}, "cell_type": "code", "source": "import requests\nurl     = wml_credentials[\"url\"]+'/v1/preauth/validateAuth'\nheaders = { \"Content-Type\" : \"application/x-www-form-urlencoded\" }\nusername = wml_credentials[\"username\"]\npassword = wml_credentials[\"password\"]\nresponse  = requests.get( url,  auth=( username, password ) , verify=False)\nresponse.json()\nmltoken = response.json()[\"accessToken\"]\nmltoken", "execution_count": 43, "outputs": [{"output_type": "execute_result", "execution_count": 43, "data": {"text/plain": "'eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImMtWGdjTEhIRmtZdkIzczJHMjlmMkdDOUZzanZuSjhXVFRRQ1FjNmJCVXMifQ.eyJ1c2VybmFtZSI6InJpdGNoaWUiLCJyb2xlIjoiVXNlciIsInBlcm1pc3Npb25zIjpbImNyZWF0ZV9wcm9qZWN0IiwiYWNjZXNzX2NhdGFsb2ciLCJhY2Nlc3NfaW5mb3JtYXRpb25fYXNzZXRzIiwidmlld19xdWFsaXR5IiwiY3JlYXRlX3NwYWNlIiwic2lnbl9pbl9vbmx5Il0sImdyb3VwcyI6WzEwMDAwXSwic3ViIjoicml0Y2hpZSIsImlzcyI6IktOT1hTU08iLCJhdWQiOiJEU1giLCJ1aWQiOiIxMDAwMzMxMDA1IiwiYXV0aGVudGljYXRvciI6ImRlZmF1bHQiLCJkaXNwbGF5X25hbWUiOiJBbGV4YW5kZXIgUmljaHRoYW1tZXIiLCJpYXQiOjE2MzI5NTEyNzIsImV4cCI6MTYzMjk5NDQzNn0.X7e4Hd-AE4dBpMIjNOYgNd8cFIdw1atOUCdamSfd0tmBalXm5aXnd-ErtL0E-MMyoi5M0yGKMIJTOtubzPnIhjulAavXgAZQ2Q9Qi696ruXN-c1gxIURvLJMeCkj3W-AkKOXsLr8qSf5qcZ-m4WYN5ox8r21WMtsyFHVsVq4jwVRkWFqsuYCVVY6Dep8rC5H1aNkeubP0t9HV2c4x173CLMyTct40ib3JVnI0v1GVAuAt1Rz405Lj6S1fLdAKowEBieOyn7lOaSRb_Sf2pS3qWyT9PBFSp1W3anTiMPfhTGJX3cIwPjZzhdD2Xwkt30yr_XGAtAXlmXdNFJjNS53cg'"}, "metadata": {}}]}, {"metadata": {"id": "b13d25a6b7ee4c8d8a825e9c737bfbc0"}, "cell_type": "code", "source": "import urllib3, requests, json\n\n# NOTE: you must construct mltoken based on provided documentation\nheader = {'Content-Type': 'application/json', 'Authorization': 'Bearer ' + mltoken}\n\n# NOTE: manually define and pass the array(s) of values to be scored in the next line\npayload_scoring = {\"input_data\": [{\n        \"fields\": ['Alter', 'Geschlecht', 'Familienstand', 'HatKinder', 'Zahlmethode', 'DAUER_Kundenbeziehung', 'Region', 'Bundesland', 'Gebiet','Umsatz_Total', 'Umsatz_letztes_Quartal', 'Oekostrom','Fernwaermeabnehmer'],\n        \"values\": [[94, 1, 0, 0, 0, 11, 1, 15, 1, 6675, 107, 0, 0]]}]}\n\nresponse_scoring = requests.post('https://cpd-cp4d.apps.plnt.tec.uk.ibm.com/ml/v4/deployments/churn/predictions?version=2021-09-29', json=payload_scoring, headers=header, verify=False)\nprint(\"Scoring response\")\nprint(json.loads(response_scoring.text))", "execution_count": 47, "outputs": [{"output_type": "stream", "text": "Scoring response\n{'predictions': [{'fields': ['prediction', 'probability'], 'values': [[1, [0.4050632911392405, 0.5949367088607594]]]}]}\n", "name": "stdout"}]}, {"metadata": {"id": "925680f0ba754681bfaf3f0024c82778"}, "cell_type": "code", "source": "", "execution_count": null, "outputs": []}], "metadata": {"kernelspec": {"name": "python3", "display_name": "Python 3.8", "language": "python"}, "language_info": {"name": "python", "version": "3.8.10", "mimetype": "text/x-python", "codemirror_mode": {"name": "ipython", "version": 3}, "pygments_lexer": "ipython3", "nbconvert_exporter": "python", "file_extension": ".py"}}, "nbformat": 4, "nbformat_minor": 1}